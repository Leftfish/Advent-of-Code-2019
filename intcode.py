from collections import defaultdict

class Computer():
    def __init__(self):
        self.memory = [0] * 10000
        self.ptr = 0
        self.rel_base = 0
        self.input = []
        self.output = []

    def __repr__(self):
        status = ''
        status += "Pointer: {}\n".format(self.ptr)
        status += "Relative base: {}\n".format(self.rel_base)
        status += "InStream: {}\n".format(self.input)
        status += "Output: {}\n".format(self.output)
        status += "Next op: {}\n".format(self.memory[self.ptr])
        return status

    def load_program(self, code):
        for i in range(len(code)):
            self.memory[i] = code[i]

    def reset(self):
        self.memory = [0] * 10000
        self.ptr = 0
        self.rel_base = 0
        self.input = []
        self.output = []

    def set_input(self, inp):
        self.input.append(inp)

    def _parse_opcode(self, code):
        if len(str(code)) <= 2:
            params = [0, 0, 0]
            return code, params
        else:
            filled = str(code).zfill(5)
            code = int(filled[-2:])
            params = list(reversed(list(map(int, filled[:-2]))))
            return code, params

    def _get_data(self, params, args):
        data = []
        for p, v in zip(params, args):
            if p == 0: # POSITION MODE
                data.append(self.memory[v])
            elif p == 1: # IMMEDIATE MODE
                data.append(v)
            elif p == 2: # RELATIVE MODE
                data.append(self.memory[self.rel_base + v])
        return data

    def _get_write_addr(self, op, params, args):
        write_mode = params[0] if op == 3 else params[-1]
        if write_mode == 0: # POSITION MODE
            target = args[-1]
        elif write_mode == 2: # RELATIVE MODE
            target = args[-1] + self.rel_base
        return target
    
    def _get_op_len(self, code):
        op_len = 1
        if code in (3, 4, 9):
            op_len = 2
        elif code in (5, 6):
            op_len = 3
        elif code in (1, 2, 7, 8):
            op_len = 4
        return op_len

def run(c, noun=None, verb=None, debug=False, stop_output=False):
    if noun:
        c.memory[1] = noun
    if verb:
        c.memory[2] = verb
    
    while c.memory[c.ptr] != 99:
        op, params = c._parse_opcode(c.memory[c.ptr])
        op_len = c._get_op_len(op)
        args = c.memory[c.ptr + 1:c.ptr + op_len]
        data = c._get_data(params, args)
        exit_code = 0

        if debug: print("Operation: ", c.memory[c.ptr:c.ptr+op_len], "ptr", c.ptr, "rb", c.rel_base)
        if op == 1: # ADD
            target = c._get_write_addr(op, params, args)
            c.memory[target] = data[0] + data[1]
            c.ptr += op_len
        if op == 2: # MULTIPLY
            target = c._get_write_addr(op, params, args)
            c.memory[target] = data[0] * data[1]
            c.ptr += op_len
        if op == 3: # INPUT
            target = c._get_write_addr(op, params, args)
            try:
                inp = c.input.pop(0)
            except:
                inp = int(input("?: "))
            c.memory[target] = inp
            c.ptr += op_len
        if op == 4: # OUTPUT
            if debug: print("Output: ", data[0])
            c.output.append(data[0])
            c.ptr += op_len
            if stop_output: 
                exit_code = 1
                break
        if op == 5: # JUMP IF TRUE
            if data[0]:
                c.ptr = data[1]
            else:
                c.ptr += op_len
        if op == 6: # JUMP IF FALSE
            if not data[0]:
                c.ptr = data[1]
            else:
                c.ptr += op_len
        if op == 7: # LESS THAN
            target = c._get_write_addr(op, params, args)
            if data[0] < data[1]:
                c.memory[target] = 1
            else:
                c.memory[target] = 0
            c.ptr += op_len
        if op == 8: # EQUALS
            target = c._get_write_addr(op, params, args)
            if data[0] == data[1]:
                c.memory[target] = 1
            else:
                c.memory[target] = 0
            c.ptr += op_len
        if op == 9: # CHANGE REL BASE
            c.rel_base += data[0]
            c.ptr += op_len
    return exit_code

'''# DAY 2: TESTS
c1 = Computer()
code_1 = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,10,23,2,13,23,27,1,5,27,31,2,6,31,35,1,6,35,39,2,39,9,43,1,5,43,47,1,13,47,51,1,10,51,55,2,55,10,59,2,10,59,63,1,9,63,67,2,67,13,71,1,71,6,75,2,6,75,79,1,5,79,83,2,83,9,87,1,6,87,91,2,91,6,95,1,95,6,99,2,99,13,103,1,6,103,107,1,2,107,111,1,111,9,0,99,2,14,0,0]
c1.load_program(code_1)
run(c1,12,2)
print("Day 2 pt.1: ", c1.memory[0] == 4138687)
'''
'''
# DAY 5: TESTS
c2 = Computer()
code_2 = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,83,20,225,1102,55,83,224,1001,224,-4565,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,52,15,225,1102,42,92,225,1101,24,65,225,101,33,44,224,101,-125,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,39,75,224,101,-127,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,2,14,48,224,101,-1300,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1002,139,79,224,101,-1896,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,24,92,225,1101,20,53,224,101,-73,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,70,33,225,1101,56,33,225,1,196,170,224,1001,224,-38,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1101,50,5,225,102,91,166,224,1001,224,-3003,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,389,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,434,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,494,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,509,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226]
c2.load_program(code_2)
c2.set_input(1)
run(c2)
print("Day 5 pt.1: ", c2.output[0] == 12428642)
print(c2)
c2.reset()
c2.load_program(code_2)
c2.set_input(5)
run(c2)
print("Day 5 pt.2: ", c2.output[0] == 918655)
print(c2)
'''
'''
# DAY 9: TESTS
c3 = Computer()
code_3 = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,20,0,1007,1101,0,197,1022,1102,475,1,1028,1102,30,1,1008,1101,25,0,1010,1102,1,23,1009,1101,0,22,1013,1101,470,0,1029,1102,24,1,1014,1102,1,39,1005,1101,31,0,1003,1101,807,0,1026,1101,0,26,1018,1102,1,804,1027,1101,0,0,1020,1102,1,38,1017,1101,0,27,1016,1102,443,1,1024,1101,0,36,1006,1102,21,1,1015,1101,28,0,1001,1102,33,1,1019,1102,1,37,1011,1102,1,190,1023,1101,0,434,1025,1101,34,0,1004,1102,1,1,1021,1101,0,29,1012,1102,1,32,1002,1101,35,0,1000,109,30,2105,1,-7,1001,64,1,64,1105,1,199,4,187,1002,64,2,64,109,-23,2101,0,-5,63,1008,63,32,63,1005,63,225,4,205,1001,64,1,64,1105,1,225,1002,64,2,64,109,7,2102,1,-5,63,1008,63,23,63,1005,63,251,4,231,1001,64,1,64,1106,0,251,1002,64,2,64,109,-16,2101,0,2,63,1008,63,33,63,1005,63,275,1001,64,1,64,1106,0,277,4,257,1002,64,2,64,109,10,21102,40,1,4,1008,1012,40,63,1005,63,299,4,283,1106,0,303,1001,64,1,64,1002,64,2,64,109,7,2102,1,-9,63,1008,63,33,63,1005,63,327,1001,64,1,64,1105,1,329,4,309,1002,64,2,64,109,-17,2107,34,2,63,1005,63,347,4,335,1105,1,351,1001,64,1,64,1002,64,2,64,109,1,1201,8,0,63,1008,63,23,63,1005,63,375,1001,64,1,64,1106,0,377,4,357,1002,64,2,64,109,-4,2108,31,8,63,1005,63,395,4,383,1105,1,399,1001,64,1,64,1002,64,2,64,109,3,1201,8,0,63,1008,63,36,63,1005,63,421,4,405,1105,1,425,1001,64,1,64,1002,64,2,64,109,25,2105,1,1,4,431,1001,64,1,64,1105,1,443,1002,64,2,64,109,-3,1205,0,459,1001,64,1,64,1106,0,461,4,449,1002,64,2,64,109,-2,2106,0,10,4,467,1106,0,479,1001,64,1,64,1002,64,2,64,109,12,1206,-9,495,1001,64,1,64,1106,0,497,4,485,1002,64,2,64,109,-39,1207,9,36,63,1005,63,519,4,503,1001,64,1,64,1105,1,519,1002,64,2,64,109,11,1202,-1,1,63,1008,63,28,63,1005,63,541,4,525,1105,1,545,1001,64,1,64,1002,64,2,64,109,6,2107,24,1,63,1005,63,565,1001,64,1,64,1106,0,567,4,551,1002,64,2,64,109,1,1207,-3,35,63,1005,63,583,1106,0,589,4,573,1001,64,1,64,1002,64,2,64,109,1,21102,41,1,5,1008,1015,40,63,1005,63,613,1001,64,1,64,1105,1,615,4,595,1002,64,2,64,109,-2,2108,22,1,63,1005,63,635,1001,64,1,64,1105,1,637,4,621,1002,64,2,64,109,-10,1208,4,33,63,1005,63,653,1106,0,659,4,643,1001,64,1,64,1002,64,2,64,109,16,1206,6,673,4,665,1106,0,677,1001,64,1,64,1002,64,2,64,109,-4,1202,-8,1,63,1008,63,35,63,1005,63,701,1001,64,1,64,1105,1,703,4,683,1002,64,2,64,109,13,21108,42,42,-8,1005,1015,721,4,709,1105,1,725,1001,64,1,64,1002,64,2,64,109,-18,21107,43,44,5,1005,1010,743,4,731,1106,0,747,1001,64,1,64,1002,64,2,64,109,-11,1208,8,32,63,1005,63,765,4,753,1106,0,769,1001,64,1,64,1002,64,2,64,109,15,21101,44,0,5,1008,1014,47,63,1005,63,789,1105,1,795,4,775,1001,64,1,64,1002,64,2,64,109,13,2106,0,5,1106,0,813,4,801,1001,64,1,64,1002,64,2,64,109,-12,21108,45,43,0,1005,1010,829,1106,0,835,4,819,1001,64,1,64,1002,64,2,64,109,-4,21107,46,45,10,1005,1016,855,1001,64,1,64,1106,0,857,4,841,1002,64,2,64,109,3,21101,47,0,5,1008,1014,47,63,1005,63,883,4,863,1001,64,1,64,1106,0,883,1002,64,2,64,109,10,1205,2,901,4,889,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21102,915,1,0,1106,0,922,21201,1,13433,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1106,0,922,22102,1,1,-1,21201,-2,-3,1,21102,1,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,21202,-2,1,-2,109,-3,2106,0,0]
c3.load_program(code_3)
c3.set_input(1)
run(c3)
print("Day 9 pt 1: ", c3.output[0] == 2682107844)
c3.reset()
c3.load_program(code_3)
c3.set_input(2)
run(c3)
print("Day 9 pt 2: ", c3.output[0] == 34738)
'''
